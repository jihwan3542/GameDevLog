하드웨어: 컴퓨터의 물리적 부품. 또는 전기적/기계적인 부분
소프트웨어: 하드웨어를 동작하게 하는 것

소프트웨어의 명령들과 데이터를 CPU가 순차적으로 해석하고 실행함

프로그램: 명령어들의 집합
프로그래밍: 컴퓨터가 작업을 수행하기 위해 명령어의 조합(프로그램)을 구성하는 것
프로그래밍 언어: 프로그래밍에 필요한 컴퓨터의 언어

기계어: 0과 1로 이루어진, 컴퓨터가 바로 이해할 수 있는 원시적인 언어
어셈블리어: 상징적인 니모닉 기호를 통해 기계어보다 비교적 사람이 표현하기 쉽도록 한 언어
어셈블러: 어셈블리어를 기계어로 변환하는 시스템 프로그램
고급언어: 사람이 이해하고 표현하기 쉬우며, 복잡하고 다양한 프로그램을 효율적으로 표현 가능
컴파일: 고급언어를 기계어로 변환하는 과정
컴파일러: 컴파일하는 시스템 프로그램

1972년 UNIX 운영체제를 위해 만들어진 C언어가 탄생
C언어에 객체 지향 특성 및 기능을 추가하여 C++을 만듬

표준 C++ 규칙에 맞게 작성된 프로그램은 하드웨어, 운영체제 플랫폼에 상관없이 표준 C++ 컴파일러에 의해 컴파일되고 동일한 실행결과를 보장
이처럼 이식성과 플랫폼 독립성은 고급언어의 특징이라고 볼 수 있음

C언어 코드와 호환성이 높고 C언어를 알고 있다면 배우기 쉬움
C++ 언어는 후에 JAVA 언어에 큰 영향을 주었음

객체 지향:  프로그램을 수많은 '객체(object)'라는 기본 단위로 나누고 이들의 상호 작용으로 서술하는 방식

▼C++에 추가된 기능(C의 문법적 규칙을 그대로 승계하되 여러 기능 추가)
-함수중복
-디폴트 매개 변수
-참조
-참조에 의한 호출
-new와 delete 연산자
-연산자 재정의
-제네릭 함수와 클래스

▼C++ 언어의 장점
-C와의 호환성 >> C 코드의 재활용 가능
-데이터 캡슐화, 상속, 다형성 등의 객체 지향 개념 도입 >> 생산성 ↑, 쉬운 작성 관리 유지 보수
-엄격한 타입 체크 >> 오류 가능성 ↓, 디버깅
-실행시간의 효율성 저하 최소화
-하이레벨과 로우레벨의 프로그래밍이 가능 >> 객체지향을 통한 쉬운 구조적 코드 작성 가능, 하드웨어의 저수준 제어가 가능

▼C++의 특성
-객체와 캡슐화(클래스와 객체)
-상속성(부모-자식 클래스)
-다형성(연상자 중복, 함수 중복)
-소프트웨어의 생산성 향상(캡슐화 등)
-실세계에 대한 쉬운 모델링(절차 지향 프로그래밍)

절차 지향 프로그래밍: 절차대로 일련의 명령어를 나열하여 프로그래밍 하는 것
제네릭 프로그래밍: 여러 데이터 타입에 대해 재사용할 수 있도록 만드는 프로그래밍 방식
템플릿: 타입의 일반화하여 다양한 타입에도 함수 또는 클래스를 사용할 수 있도록 하는 문법

C++은 C언어 호환성을 위해 캡슐화의 원칙이 다소 무너진 부분이 있음

소스코드 작성 >> 컴파일 >> 링킹 >> 실행파일
IDE: 코드 작성 및 편집, 컴파일, 링킹, 디버깅 등을 지원하는 통합 개발 소프트웨어

컴파일 단계에서 문법이 맞는지 검사, 맞으면 기계어 코드로 변환하여 오브젝트 파일 생성하고 틀리면 컴파일 오류
링킹 단계에서 오브젝트 파일이 참조하는 C++ 표준 라이브러리나 다른 오브젝트 파일을 하나의 실행 파일로 만듬
디버깅은 디버거라는 프로그램을 이용해 오류 수정 방법을 제공함

C 라이브러리
C++ 입출력 라이브러리
C++ STL 라이브러리

