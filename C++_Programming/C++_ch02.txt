주석문: 
	//이 문장은 한 줄 끝까지 컴파일러가 무시합니다.
	/* 슬래시 사이의 문장을 컴파일러가 무시합니다. */\

main() 함수: C++ 프로그램 실행의 시작점
	int main() {
		return 0;  //메인 함수만 예외적으로 생략 가능
	}

main() 함수의 리턴값은 부모 프로그램에 전달되는데, 대부분의 경우 이는 운영체제임

#include <iostream>: 전처리기에 대한 지시문으로 컴파일 전 전처리기를 호출하여 소스 파일에 헤더파일을 삽입함. iostream은 C++ 표준 입출력을 위한 클래스와 객체가 선언되어 있음

cout: C++ 표준 출력 스트림 객체
<<: 스트림 삽입 연산자로, 정수를 왼쪽으로 시프트하는 C++의 기본 연산자에서 재정의됨

std::cout << "cout과" << "연산자를 사용해서 여러 개의 데이터 출력 가능";
std::cout << "\n과" << std::endl << "은 줄바꿈 입니다.";

namespace 사용을 통해 동일한 이름에 대하여 충돌을 방지 가능
	namespace A { int value = 10; }
	namespace B { int value = 20; }
	int main() { std::cout << A::value << B::value;}

using 지시어 사용을 통해 이름 공간 접두어(std:: 등) 생략 가능
	using namespace std;
	using std::cout;
	using LL = long long;

cin: C++ 표준 입력 스트림 객체
>>: 스트림 추출 연산자, 왼쪽 스트림 객체에서 데이터를 읽어서 오른쪽 변수에 삽입

유저가 입력한 값은 cin의 스트림 버퍼에 저장이 되고 Enter키 입력 후 버퍼의 내용을 변수에 저장

문자열: 하나 이상의 문자들이 연속적으로 나열된 데이터, C++의 기본 데이터 타입은 아님
	C-스트링 (C언어에서 문자열을 표현하는 방법)
	string 클래스 (문자열을 객체로 다루는 방법)

C-스트링: 널문자('\0' 또는 0)로 끝나는 char 배열
	char str[9] = {'C', '-', 's', 't', 'r', 'i', 'n', 'g', '\0' };
	char str[9] = "C-string";
	char str[] = "C-string";

#include <cstring> 또는 #include <string.h>를 통해 strcpy(), strcmp(), strlen() 등의 C 라이브러리 함수를 사용 가능
<cstring> 권장

(배열의 크기 - 1) 만큼 배열에 문자를 저장 가능
언어에 따라 문자의 크기는 다를 수 있음 (영어 1바이트, 한글 2바이트 등)

>> 연산자는 공백문자(Space)를 만나면 입력이 끝나다고 인식함
cin.getline()을 사용하면 공백문자를 포함한 문자열을 입력 받을 수 있음
	cin.getline(char str[], int str_size, char end_char)
		cin::getline(str, 100, '\n')과 같이 사용함
	end_char이 입력될 때까지 입력을 받을 수 있음
	end_char은 생략이 가능한데, 이 경우 디폴트값은 '\n'임

cctype 헤더파일의 isspace()함수를 통해 공백을 확인할 수 있음

string 클래스: string 변수명("입력할 문자열");

getline()을 사용하면 C++ string 클래스에 문자열 입력을 받을 수 있음
	cin.getline()과는 다른 함수이며 getline()을 사용하기 위해 string 헤더파일이 필요함
	getline(istream&, string&) << 참조로 전달됨
	getline(cin, str)과 같이 사용함
	공백문자도 입력을 받을 수 있음

C/C++ 컴파일러는 컴파일 전 전처리기를 실행시켜 #include문을 모두 실행함
iostream >> istream >> ostream >> ios 를 include함
위의 헤더파일은 컴파일러가 설치된 폴더의 include 폴더에 존재함

표준 C++ 헤더파일은 파일 확장자가 없음
#include <string.h>은 #include <cstring>으로 사용

#include <>와 ""의 차이는 헤더 파일이 존재하는 위치의 차이임
	<>은 컴파일러가 설치된 폴더이고 ""는 개발자의 프로젝트 폴더 또는 옵션으로 지정한 include 폴더임

헤더파일에는 함수의 선언(원형)만 포함되어 있고 함수의 코드는 이미 컴파일된 기계어 형태로 C 라이브러리에 들어있음
따라서 함수가 호출되면 헤더파일이 아니라 C 라이브러리에서 코드를 호출함

cout이나 cin은 iostream 헤더 파일 내 선언된 객체들임
헤더 파일을 열어보면 cout은 ostream 타입의 객체로, cin은 istream 타입의 객체로 선언 되어 있음
